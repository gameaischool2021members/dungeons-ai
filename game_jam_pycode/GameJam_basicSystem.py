#!/usr/bin/env python
# coding: utf-8

# In[16]:


# import random
import random



player_inv = ['rope','hammer','nails']
#The above is used to keep track of the items the player has access to.
#This is important as it is then used to check if the player has any mentioned items to use. 
#In a more updated model, it would allow the player to add or remove an item.
#The system should make a check to see if an item has been called. If so, it will make the check easier.


# In[17]:


#Next uo are the player stats+modifiers. These are used in skill checks
#to keep it simple, only 3 are present.

strength = 14;
strength_mod = 2;
dexterity = 18;
dexterity_mod = 4;
intelligence = 8;
intelligence_mod = -1;

#Player stats are used to check if the player succeeds in an action.


# In[18]:


initial_scene = "You come across a wide vally. Your target lies on the other side. the bridge is mostly broken and you must get across. You may be able to run across it if you step lightly, or you can try to jump the gap. Finally, you may attempt to repair the bridge. However, if you simply attempt to walk across, you will almost surely fail. What do you do?"
# The scene is currently pre-set.
# Ideally, the scene will be generated by the system itself based on existing campaigns.

print(initial_scene)


# In[32]:


# next we check what type of word is each in initial_scene and define them.
# This provided a great challange as each word would need to be accounted for. 


playerCall = "you","the party","your team"
is_playercall = 0

total_dc = 13

challange_up_adj = ['wide','large','great','challanging']
challange_down_adj = ['small','narrow']


prompt_tokens = initial_scene.split()

for z in range(len(prompt_tokens)):
    for a in range(len(challange_up_adj)):
        if prompt_tokens[z] == challange_up_adj[a]:
            total_dc = total_dc+2
    for b in range(len(challange_down_adj)):
        if prompt_tokens[z] == challange_down_adj[b]:
            total_dc = total_dc-2
            
print(total_dc)

#The above function ingreases or decreases the chalange depending on the words used to describe it.


# In[33]:


# The user will now enter his prompt.
user_action = input("Enter your action: ")
print(user_action)


# In[34]:


#The user has now entered a prompt. The system will pass through the prompt and attempt to understand it.
#A current limitation is that the system cannot understand all words, but only the already specified ones.
#This can be seen below.

strength_check_actions = ['jump','leap','throw','toss','chuck']
strength_check_req = 0

dexterity_check_actions = ['run', 'dash', 'swing','climb']
dexterity_check_req = 0

intelligence_check_actions = ['repair','fix']
intelligence_check_req = 0


cntr = 0
cntr_str = 0

user_action_tokens = user_action.split()
#print(user_action_tokens)
#print(strength_check_actions)




for x in range(len(user_action_tokens)):
    for i in range(len(strength_check_actions)):
        if user_action_tokens[x] == strength_check_actions[i]:
            strength_check_req = strength_check_req+1;





            
for x in range(len(user_action_tokens)):
    for i in range(len(dexterity_check_actions)):
        if user_action_tokens[x] == dexterity_check_actions[i]:
            dexterity_check_req = dexterity_check_req+1;
            
            
            
            
for x in range(len(user_action_tokens)):
    for i in range(len(intelligence_check_actions)):
        if user_action_tokens[x] == intelligence_check_actions[i]:
            intelligence_check_req = intelligence_check_req+1;


print(strength_check_req)
print(dexterity_check_req)
print(intelligence_check_req)
#Used the above to make sure the keywords are being successfully interpreted. 

if strength_check_req == 0:
    if dexterity_check_req == 0:
        if intelligence_check_req == 0:        
            print("This action is invalid!")
            print("You will by default attempt to walk casually across.")






# To explain what's happening above:
# key words are being declared. Each key word corrisponds with a related stat.
# the user input is then checked for said words.
# Depending on what is found, different skill checks will be called. 
# Ideally, the program will be able to check if the word is appropriate, and if not, it'll inform the user.
# Further, there should be more key words associated with each skill type.


# In[35]:


# The way odds are being calculated


dc_subtract = strength_check_req+dexterity_check_req+intelligence_check_req
#print(dc_subtract)


if strength_check_req > 0:
    print("A strength check is required: ")
    dc = 15 - dc_subtract
    print("The dc is ", dc)
    print("now rolling...")
    dice_roll = random.randint(1,20) + strength_mod
    if dc < dice_roll:
        print("You passed the strength check.")
        total_dc = total_dc - 1
    else:
        print("You failed the strength check.")
        total_dc = total_dc + 1
        

        
if dexterity_check_req > 0:
    print("A dexterity check is required: ")
    dc = 15 - dc_subtract
    print("The dc is ", dc)
    print("now rolling...")
    dice_roll = random.randint(1,20) + dexterity_mod
    if dc < dice_roll:
        print("You passed the dexterity check.")
        total_dc = total_dc - 1
    else:
        print("You failed the dexterity check.")
        total_dc = total_dc + 1
    
    
    
    
    
if intelligence_check_req > 0:
    print("A intelligence check is required: ")
    dc = 17 - dc_subtract
    print("The dc is ", dc)
    print("now rolling...")
    dice_roll = random.randint(1,20) + intelligence_mod
    if dc < dice_roll:
        print("You passed the intelligence check.")
        total_dc = total_dc - 1
    else:
        print("You failed the intelligence check.")
        total_dc = total_dc + 1
    
    
    
    
print("")    
    
    
print("The total dc required is: ", total_dc)

if total_dc > 15:
    print("Due to your fumbling, the situation has gotten considerably harder")
    print("")
    dice_roll = random.randint(1,20)
    if total_dc < dice_roll:
        print("Despite the hardships caused by you own actions, you somehow still manage to make it across the vally.")
    else:
        print("You fail to make it across and plummet to your death.")
    
    
    
    
if total_dc == 15:
    print("")
    dice_roll = random.randint(1,20)
    if total_dc < dice_roll:
        print("You successsfully make it across the vally.")
    else:
        print("You fail to make it across and plummet to your death.")
    
    
    
 



if total_dc < 15:
    print("By planning and carefully considering your actions, you manage to increase your chances of crossing.")
    print("")
    dice_roll = random.randint(1,20)
    if total_dc < dice_roll:
        print("You skillfully make it across the vally.")
    else:
        print("You fail to make it across despite the odds and plummet to your death.")



    
# once again, ideally, the system will be able to come up with a scene and confirmation on its own.   


# In[ ]:




